name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Test
        run: npm test

  # The deploy job is commented out as it requires AWS credentials to be configured as secrets.
  # To enable, add AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_REGION to your GitHub repository secrets.
  # You will also need to replace YOUR_ECR_REPOSITORY and YOUR_ECS_SERVICE with your actual resource names.
  #
  # deploy:
  #   needs: build-and-test
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: YOUR_AWS_REGION # e.g., us-east-1
  #
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #
  #     - name: Build, tag, and push image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: YOUR_ECR_REPOSITORY
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  #
  #     - name: Deploy to Amazon ECS
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: YOUR_ECS_TASK_DEFINITION_NAME # e.g., my-app-task
  #         service: YOUR_ECS_SERVICE_NAME # e.g., my-app-service
  #         cluster: YOUR_ECS_CLUSTER_NAME # e.g., default
  #         image: ${{ steps.build-image.outputs.image }}
  #         wait-for-service-stability: true
